# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  username: String
  azureId: String
  phone: String
  pincode: String
  city: String
  state: String
  country: String
  address: String
  organization: String
  password: PasswordState
  isAdmin: Boolean
  isVerified: Boolean
  subscription(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionWhereUniqueInput): [Subscription!]
  subscriptionCount(where: SubscriptionWhereInput! = {}): Int
  certificate(where: CertificateWhereInput! = {}, orderBy: [CertificateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CertificateWhereUniqueInput): [Certificate!]
  certificateCount(where: CertificateWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  username: StringFilter
  azureId: StringFilter
  phone: StringFilter
  pincode: StringFilter
  city: StringFilter
  state: StringFilter
  country: StringFilter
  address: StringFilter
  organization: StringFilter
  isAdmin: BooleanFilter
  isVerified: BooleanFilter
  subscription: SubscriptionManyRelationFilter
  certificate: CertificateManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SubscriptionManyRelationFilter {
  every: SubscriptionWhereInput
  some: SubscriptionWhereInput
  none: SubscriptionWhereInput
}

input CertificateManyRelationFilter {
  every: CertificateWhereInput
  some: CertificateWhereInput
  none: CertificateWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  username: OrderDirection
  azureId: OrderDirection
  phone: OrderDirection
  pincode: OrderDirection
  city: OrderDirection
  state: OrderDirection
  country: OrderDirection
  address: OrderDirection
  organization: OrderDirection
  isAdmin: OrderDirection
  isVerified: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  username: String
  azureId: String
  phone: String
  pincode: String
  city: String
  state: String
  country: String
  address: String
  organization: String
  password: String
  isAdmin: Boolean
  isVerified: Boolean
  subscription: SubscriptionRelateToManyForUpdateInput
  certificate: CertificateRelateToManyForUpdateInput
}

input SubscriptionRelateToManyForUpdateInput {
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

input CertificateRelateToManyForUpdateInput {
  disconnect: [CertificateWhereUniqueInput!]
  set: [CertificateWhereUniqueInput!]
  create: [CertificateCreateInput!]
  connect: [CertificateWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  username: String
  azureId: String
  phone: String
  pincode: String
  city: String
  state: String
  country: String
  address: String
  organization: String
  password: String
  isAdmin: Boolean
  isVerified: Boolean
  subscription: SubscriptionRelateToManyForCreateInput
  certificate: CertificateRelateToManyForCreateInput
}

input SubscriptionRelateToManyForCreateInput {
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

input CertificateRelateToManyForCreateInput {
  create: [CertificateCreateInput!]
  connect: [CertificateWhereUniqueInput!]
}

type Bulletin {
  id: ID!
  title: String
  subTitle: String
  url: String
  image: S3ImageFieldOutput
  information: String
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

interface S3ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: S3ImageExtension!
  ref: String!
  url: String!
}

enum S3ImageExtension {
  jpg
  png
  webp
  gif
}

input BulletinWhereUniqueInput {
  id: ID
}

input BulletinWhereInput {
  AND: [BulletinWhereInput!]
  OR: [BulletinWhereInput!]
  NOT: [BulletinWhereInput!]
  id: IDFilter
  title: StringFilter
  subTitle: StringFilter
  url: StringFilter
  information: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input BulletinOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subTitle: OrderDirection
  url: OrderDirection
  information: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BulletinUpdateInput {
  title: String
  subTitle: String
  url: String
  image: S3ImageFieldInput
  information: String
}

input S3ImageFieldInput {
  upload: Upload
  ref: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BulletinUpdateArgs {
  where: BulletinWhereUniqueInput!
  data: BulletinUpdateInput!
}

input BulletinCreateInput {
  title: String
  subTitle: String
  url: String
  image: S3ImageFieldInput
  information: String
}

type Event {
  id: ID!
  title: String
  subTitle: String
  startDate: DateTime
  endDate: DateTime
  url: String
  information: String
  image: S3ImageFieldOutput
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  title: StringFilter
  subTitle: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  url: StringFilter
  information: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subTitle: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  url: OrderDirection
  information: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  title: String
  subTitle: String
  startDate: DateTime
  endDate: DateTime
  url: String
  information: String
  image: S3ImageFieldInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  title: String
  subTitle: String
  startDate: DateTime
  endDate: DateTime
  url: String
  information: String
  image: S3ImageFieldInput
}

type Announcement {
  id: ID!
  title: String
  date: DateTime
  information: String
  linkType: String
  link: String
  linkTarget: String
  image: S3ImageFieldOutput
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

input AnnouncementWhereUniqueInput {
  id: ID
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IDFilter
  title: StringFilter
  date: DateTimeFilter
  information: StringFilter
  linkType: StringNullableFilter
  link: StringFilter
  linkTarget: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input AnnouncementOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
  information: OrderDirection
  linkType: OrderDirection
  link: OrderDirection
  linkTarget: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AnnouncementUpdateInput {
  title: String
  date: DateTime
  information: String
  linkType: String
  link: String
  linkTarget: String
  image: S3ImageFieldInput
}

input AnnouncementUpdateArgs {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateInput!
}

input AnnouncementCreateInput {
  title: String
  date: DateTime
  information: String
  linkType: String
  link: String
  linkTarget: String
  image: S3ImageFieldInput
}

type Plan {
  id: ID!
  name: String
  srNo: Int
  random: String
  price: Float
  description: String
  subscription(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionWhereUniqueInput): [Subscription!]
  subscriptionCount(where: SubscriptionWhereInput! = {}): Int
  video(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  videoCount(where: VideoWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input PlanWhereUniqueInput {
  id: ID
}

input PlanWhereInput {
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
  id: IDFilter
  name: StringFilter
  srNo: IntNullableFilter
  random: StringNullableFilter
  price: FloatFilter
  description: StringFilter
  subscription: SubscriptionManyRelationFilter
  video: VideoManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input VideoManyRelationFilter {
  every: VideoWhereInput
  some: VideoWhereInput
  none: VideoWhereInput
}

input PlanOrderByInput {
  id: OrderDirection
  name: OrderDirection
  srNo: OrderDirection
  random: OrderDirection
  price: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input PlanUpdateInput {
  name: String
  srNo: Int
  random: String
  price: Float
  description: String
  subscription: SubscriptionRelateToManyForUpdateInput
  video: VideoRelateToManyForUpdateInput
}

input VideoRelateToManyForUpdateInput {
  disconnect: [VideoWhereUniqueInput!]
  set: [VideoWhereUniqueInput!]
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

input PlanUpdateArgs {
  where: PlanWhereUniqueInput!
  data: PlanUpdateInput!
}

input PlanCreateInput {
  name: String
  srNo: Int
  random: String
  price: Float
  description: String
  subscription: SubscriptionRelateToManyForCreateInput
  video: VideoRelateToManyForCreateInput
}

input VideoRelateToManyForCreateInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

type Subscription {
  id: ID!
  plan: Plan
  user: User
  paymentStatus: String
  paymentId: String
  amount: Float
  transactionDate: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  plan: PlanWhereInput
  user: UserWhereInput
  paymentStatus: StringFilter
  paymentId: StringFilter
  amount: FloatFilter
  transactionDate: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input SubscriptionOrderByInput {
  id: OrderDirection
  paymentStatus: OrderDirection
  paymentId: OrderDirection
  amount: OrderDirection
  transactionDate: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input SubscriptionUpdateInput {
  plan: PlanRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  paymentStatus: String
  paymentId: String
  amount: Float
  transactionDate: DateTime
}

input PlanRelateToOneForUpdateInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  plan: PlanRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  paymentStatus: String
  paymentId: String
  amount: Float
  transactionDate: DateTime
}

input PlanRelateToOneForCreateInput {
  create: PlanCreateInput
  connect: PlanWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Video {
  id: ID!
  name: String
  srNo: Int
  video_type: String
  isPublic: Boolean
  isFeatured: Boolean
  videoId: String
  url: S3FileFieldOutput
  thumbnail: S3ImageFieldOutput
  plan: Plan
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

interface S3FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  srNo: IntNullableFilter
  video_type: StringNullableFilter
  isPublic: BooleanFilter
  isFeatured: BooleanFilter
  videoId: StringFilter
  plan: PlanWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  srNo: OrderDirection
  video_type: OrderDirection
  isPublic: OrderDirection
  isFeatured: OrderDirection
  videoId: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  srNo: Int
  video_type: String
  isPublic: Boolean
  isFeatured: Boolean
  videoId: String
  url: S3FileFieldInput
  thumbnail: S3ImageFieldInput
  plan: PlanRelateToOneForUpdateInput
}

input S3FileFieldInput {
  upload: Upload
  ref: String
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  srNo: Int
  video_type: String
  isPublic: Boolean
  isFeatured: Boolean
  videoId: String
  url: S3FileFieldInput
  thumbnail: S3ImageFieldInput
  plan: PlanRelateToOneForCreateInput
}

type WatchingList {
  id: ID!
  video: Video
  user: User
  duration: String
  watchtime: String
  status: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input WatchingListWhereUniqueInput {
  id: ID
}

input WatchingListWhereInput {
  AND: [WatchingListWhereInput!]
  OR: [WatchingListWhereInput!]
  NOT: [WatchingListWhereInput!]
  id: IDFilter
  video: VideoWhereInput
  user: UserWhereInput
  duration: StringFilter
  watchtime: StringFilter
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input WatchingListOrderByInput {
  id: OrderDirection
  duration: OrderDirection
  watchtime: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input WatchingListUpdateInput {
  video: VideoRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  duration: String
  watchtime: String
  status: String
}

input VideoRelateToOneForUpdateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
}

input WatchingListUpdateArgs {
  where: WatchingListWhereUniqueInput!
  data: WatchingListUpdateInput!
}

input WatchingListCreateInput {
  video: VideoRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  duration: String
  watchtime: String
  status: String
}

input VideoRelateToOneForCreateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

type Certificate {
  id: ID!
  user: User
  certificate: S3FileFieldOutput
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

input CertificateWhereUniqueInput {
  id: ID
}

type S3FileFieldOutputType implements S3FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input CertificateWhereInput {
  AND: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  NOT: [CertificateWhereInput!]
  id: IDFilter
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input CertificateOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CertificateUpdateInput {
  user: UserRelateToOneForUpdateInput
  certificate: S3FileFieldInput
}

input CertificateUpdateArgs {
  where: CertificateWhereUniqueInput!
  data: CertificateUpdateInput!
}

input CertificateCreateInput {
  user: UserRelateToOneForCreateInput
  certificate: S3FileFieldInput
}

type Membership {
  id: ID!
  location: String
  type: String
  name: String
  phone: String
  email: String
  designation: String
  company: String
  pincode: String
  city: String
  state: String
  country: String
  address: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input MembershipWhereUniqueInput {
  id: ID
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
  id: IDFilter
  location: StringNullableFilter
  type: StringNullableFilter
  name: StringFilter
  phone: StringFilter
  email: StringFilter
  designation: StringFilter
  company: StringFilter
  pincode: StringFilter
  city: StringFilter
  state: StringFilter
  country: StringFilter
  address: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input MembershipOrderByInput {
  id: OrderDirection
  location: OrderDirection
  type: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  designation: OrderDirection
  company: OrderDirection
  pincode: OrderDirection
  city: OrderDirection
  state: OrderDirection
  country: OrderDirection
  address: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input MembershipUpdateInput {
  location: String
  type: String
  name: String
  phone: String
  email: String
  designation: String
  company: String
  pincode: String
  city: String
  state: String
  country: String
  address: String
}

input MembershipUpdateArgs {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateInput!
}

input MembershipCreateInput {
  location: String
  type: String
  name: String
  phone: String
  email: String
  designation: String
  company: String
  pincode: String
  city: String
  state: String
  country: String
  address: String
}

type CallRequest {
  id: ID!
  name: String
  email: String
  phoneNumber: String
  message: String
  time: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input CallRequestWhereUniqueInput {
  id: ID
}

input CallRequestWhereInput {
  AND: [CallRequestWhereInput!]
  OR: [CallRequestWhereInput!]
  NOT: [CallRequestWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  message: StringFilter
  time: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input CallRequestOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  message: OrderDirection
  time: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input CallRequestUpdateInput {
  name: String
  email: String
  phoneNumber: String
  message: String
  time: String
}

input CallRequestUpdateArgs {
  where: CallRequestWhereUniqueInput!
  data: CallRequestUpdateInput!
}

input CallRequestCreateInput {
  name: String
  email: String
  phoneNumber: String
  message: String
  time: String
}

type WillMeetUp {
  id: ID!
  name: String
  email: String
  phoneNumber: String
  organization: String
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input WillMeetUpWhereUniqueInput {
  id: ID
}

input WillMeetUpWhereInput {
  AND: [WillMeetUpWhereInput!]
  OR: [WillMeetUpWhereInput!]
  NOT: [WillMeetUpWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  organization: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input WillMeetUpOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  organization: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input WillMeetUpUpdateInput {
  name: String
  email: String
  phoneNumber: String
  organization: String
}

input WillMeetUpUpdateArgs {
  where: WillMeetUpWhereUniqueInput!
  data: WillMeetUpUpdateInput!
}

input WillMeetUpCreateInput {
  name: String
  email: String
  phoneNumber: String
  organization: String
}

type Banner {
  id: ID!
  name: String
  banner_type: String
  videoId: String
  image: S3ImageFieldOutput
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

input BannerWhereUniqueInput {
  id: ID
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  name: StringFilter
  banner_type: StringNullableFilter
  videoId: StringFilter
  active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input BannerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  banner_type: OrderDirection
  videoId: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BannerUpdateInput {
  name: String
  banner_type: String
  videoId: String
  image: S3ImageFieldInput
  active: Boolean
}

input BannerUpdateArgs {
  where: BannerWhereUniqueInput!
  data: BannerUpdateInput!
}

input BannerCreateInput {
  name: String
  banner_type: String
  videoId: String
  image: S3ImageFieldInput
  active: Boolean
}

type Config {
  id: ID!
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  createdBy: User
}

input ConfigWhereUniqueInput {
  id: ID
  key: String
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  key: StringFilter
  value: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input ConfigOrderByInput {
  id: OrderDirection
  key: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConfigUpdateInput {
  key: String
  value: String
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput!
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  key: String
  value: String
}

type Quote {
  id: ID!
  quote: String
  date: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input QuoteWhereUniqueInput {
  id: ID
}

input QuoteWhereInput {
  AND: [QuoteWhereInput!]
  OR: [QuoteWhereInput!]
  NOT: [QuoteWhereInput!]
  id: IDFilter
  quote: StringFilter
  date: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input QuoteOrderByInput {
  id: OrderDirection
  quote: OrderDirection
  date: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input QuoteUpdateInput {
  quote: String
  date: DateTime
}

input QuoteUpdateArgs {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateInput!
}

input QuoteCreateInput {
  quote: String
  date: DateTime
}

type Notification {
  id: ID!
  title: String
  date: DateTime
  description: Notification_description_Document
  image: S3ImageFieldOutput
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

type Notification_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NotificationWhereUniqueInput {
  id: ID
}

type S3ImageFieldOutputType implements S3ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: S3ImageExtension!
  ref: String!
  url: String!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  title: StringFilter
  date: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input NotificationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input NotificationUpdateInput {
  title: String
  date: DateTime
  description: JSON
  image: S3ImageFieldInput
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  title: String
  date: DateTime
  description: JSON
  image: S3ImageFieldInput
}

type OneTimePassword {
  id: ID!
  otp: String
  email: String
  isUsed: Boolean
  user: User
  updatedAt: DateTime
  createdAt: DateTime
  updatedBy: User
  createdBy: User
}

input OneTimePasswordWhereUniqueInput {
  id: ID
  otp: String
}

input OneTimePasswordWhereInput {
  AND: [OneTimePasswordWhereInput!]
  OR: [OneTimePasswordWhereInput!]
  NOT: [OneTimePasswordWhereInput!]
  id: IDFilter
  otp: StringFilter
  email: StringFilter
  isUsed: BooleanFilter
  user: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
}

input OneTimePasswordOrderByInput {
  id: OrderDirection
  otp: OrderDirection
  email: OrderDirection
  isUsed: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input OneTimePasswordUpdateInput {
  otp: String
  email: String
  isUsed: Boolean
  user: UserRelateToOneForUpdateInput
}

input OneTimePasswordUpdateArgs {
  where: OneTimePasswordWhereUniqueInput!
  data: OneTimePasswordUpdateInput!
}

input OneTimePasswordCreateInput {
  otp: String
  email: String
  isUsed: Boolean
  user: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBulletin(data: BulletinCreateInput!): Bulletin
  createBulletins(data: [BulletinCreateInput!]!): [Bulletin]
  updateBulletin(where: BulletinWhereUniqueInput!, data: BulletinUpdateInput!): Bulletin
  updateBulletins(data: [BulletinUpdateArgs!]!): [Bulletin]
  deleteBulletin(where: BulletinWhereUniqueInput!): Bulletin
  deleteBulletins(where: [BulletinWhereUniqueInput!]!): [Bulletin]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createAnnouncement(data: AnnouncementCreateInput!): Announcement
  createAnnouncements(data: [AnnouncementCreateInput!]!): [Announcement]
  updateAnnouncement(where: AnnouncementWhereUniqueInput!, data: AnnouncementUpdateInput!): Announcement
  updateAnnouncements(data: [AnnouncementUpdateArgs!]!): [Announcement]
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncements(where: [AnnouncementWhereUniqueInput!]!): [Announcement]
  createPlan(data: PlanCreateInput!): Plan
  createPlans(data: [PlanCreateInput!]!): [Plan]
  updatePlan(where: PlanWhereUniqueInput!, data: PlanUpdateInput!): Plan
  updatePlans(data: [PlanUpdateArgs!]!): [Plan]
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deletePlans(where: [PlanWhereUniqueInput!]!): [Plan]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(where: SubscriptionWhereUniqueInput!, data: SubscriptionUpdateInput!): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createWatchingList(data: WatchingListCreateInput!): WatchingList
  createWatchingLists(data: [WatchingListCreateInput!]!): [WatchingList]
  updateWatchingList(where: WatchingListWhereUniqueInput!, data: WatchingListUpdateInput!): WatchingList
  updateWatchingLists(data: [WatchingListUpdateArgs!]!): [WatchingList]
  deleteWatchingList(where: WatchingListWhereUniqueInput!): WatchingList
  deleteWatchingLists(where: [WatchingListWhereUniqueInput!]!): [WatchingList]
  createCertificate(data: CertificateCreateInput!): Certificate
  createCertificates(data: [CertificateCreateInput!]!): [Certificate]
  updateCertificate(where: CertificateWhereUniqueInput!, data: CertificateUpdateInput!): Certificate
  updateCertificates(data: [CertificateUpdateArgs!]!): [Certificate]
  deleteCertificate(where: CertificateWhereUniqueInput!): Certificate
  deleteCertificates(where: [CertificateWhereUniqueInput!]!): [Certificate]
  createMembership(data: MembershipCreateInput!): Membership
  createMemberships(data: [MembershipCreateInput!]!): [Membership]
  updateMembership(where: MembershipWhereUniqueInput!, data: MembershipUpdateInput!): Membership
  updateMemberships(data: [MembershipUpdateArgs!]!): [Membership]
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteMemberships(where: [MembershipWhereUniqueInput!]!): [Membership]
  createCallRequest(data: CallRequestCreateInput!): CallRequest
  createCallRequests(data: [CallRequestCreateInput!]!): [CallRequest]
  updateCallRequest(where: CallRequestWhereUniqueInput!, data: CallRequestUpdateInput!): CallRequest
  updateCallRequests(data: [CallRequestUpdateArgs!]!): [CallRequest]
  deleteCallRequest(where: CallRequestWhereUniqueInput!): CallRequest
  deleteCallRequests(where: [CallRequestWhereUniqueInput!]!): [CallRequest]
  createWillMeetUp(data: WillMeetUpCreateInput!): WillMeetUp
  createWillMeetUps(data: [WillMeetUpCreateInput!]!): [WillMeetUp]
  updateWillMeetUp(where: WillMeetUpWhereUniqueInput!, data: WillMeetUpUpdateInput!): WillMeetUp
  updateWillMeetUps(data: [WillMeetUpUpdateArgs!]!): [WillMeetUp]
  deleteWillMeetUp(where: WillMeetUpWhereUniqueInput!): WillMeetUp
  deleteWillMeetUps(where: [WillMeetUpWhereUniqueInput!]!): [WillMeetUp]
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput!, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput!, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput!): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  createQuote(data: QuoteCreateInput!): Quote
  createQuotes(data: [QuoteCreateInput!]!): [Quote]
  updateQuote(where: QuoteWhereUniqueInput!, data: QuoteUpdateInput!): Quote
  updateQuotes(data: [QuoteUpdateArgs!]!): [Quote]
  deleteQuote(where: QuoteWhereUniqueInput!): Quote
  deleteQuotes(where: [QuoteWhereUniqueInput!]!): [Quote]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createOneTimePassword(data: OneTimePasswordCreateInput!): OneTimePassword
  createOneTimePasswords(data: [OneTimePasswordCreateInput!]!): [OneTimePassword]
  updateOneTimePassword(where: OneTimePasswordWhereUniqueInput!, data: OneTimePasswordUpdateInput!): OneTimePassword
  updateOneTimePasswords(data: [OneTimePasswordUpdateArgs!]!): [OneTimePassword]
  deleteOneTimePassword(where: OneTimePasswordWhereUniqueInput!): OneTimePassword
  deleteOneTimePasswords(where: [OneTimePasswordWhereUniqueInput!]!): [OneTimePassword]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  verifyOtp(email: String!, otp: String!): AuthType
  sendCertificate(id: String!, planId: String!): Certificate
  verifyPayment(encRes: String, amount: Float!, paymentStatus: String!, planId: String!, name: String, email: String, phone: String, pincode: String, city: String, state: String, country: String, address: String, organization: String, userId: String): User
  createEncData(amount: Float!, billing_name: String): encRequestType
  sendBulkMail(html: String!, type: String!): BulkMailType
  generateOtp(email: String!): generateOtpType
  generateSignupOtp(name: String, email: String!, phone: String, pincode: String, city: String, state: String, country: String, address: String, organization: String): generateSignupOtpType
  willmeetupSignup(name: String, email: String, phone: String, organization: String): User
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  bulletins(where: BulletinWhereInput! = {}, orderBy: [BulletinOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BulletinWhereUniqueInput): [Bulletin!]
  bulletin(where: BulletinWhereUniqueInput!): Bulletin
  bulletinsCount(where: BulletinWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  announcements(where: AnnouncementWhereInput! = {}, orderBy: [AnnouncementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnnouncementWhereUniqueInput): [Announcement!]
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcementsCount(where: AnnouncementWhereInput! = {}): Int
  plans(where: PlanWhereInput! = {}, orderBy: [PlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlanWhereUniqueInput): [Plan!]
  plan(where: PlanWhereUniqueInput!): Plan
  plansCount(where: PlanWhereInput! = {}): Int
  subscriptions(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubscriptionWhereUniqueInput): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  watchingLists(where: WatchingListWhereInput! = {}, orderBy: [WatchingListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WatchingListWhereUniqueInput): [WatchingList!]
  watchingList(where: WatchingListWhereUniqueInput!): WatchingList
  watchingListsCount(where: WatchingListWhereInput! = {}): Int
  certificates(where: CertificateWhereInput! = {}, orderBy: [CertificateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CertificateWhereUniqueInput): [Certificate!]
  certificate(where: CertificateWhereUniqueInput!): Certificate
  certificatesCount(where: CertificateWhereInput! = {}): Int
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membership(where: MembershipWhereUniqueInput!): Membership
  membershipsCount(where: MembershipWhereInput! = {}): Int
  callRequests(where: CallRequestWhereInput! = {}, orderBy: [CallRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CallRequestWhereUniqueInput): [CallRequest!]
  callRequest(where: CallRequestWhereUniqueInput!): CallRequest
  callRequestsCount(where: CallRequestWhereInput! = {}): Int
  willMeetUps(where: WillMeetUpWhereInput! = {}, orderBy: [WillMeetUpOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WillMeetUpWhereUniqueInput): [WillMeetUp!]
  willMeetUp(where: WillMeetUpWhereUniqueInput!): WillMeetUp
  willMeetUpsCount(where: WillMeetUpWhereInput! = {}): Int
  banners(where: BannerWhereInput! = {}, orderBy: [BannerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BannerWhereUniqueInput): [Banner!]
  banner(where: BannerWhereUniqueInput!): Banner
  bannersCount(where: BannerWhereInput! = {}): Int
  configs(where: ConfigWhereInput! = {}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  config(where: ConfigWhereUniqueInput!): Config
  configsCount(where: ConfigWhereInput! = {}): Int
  quotes(where: QuoteWhereInput! = {}, orderBy: [QuoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteWhereUniqueInput): [Quote!]
  quote(where: QuoteWhereUniqueInput!): Quote
  quotesCount(where: QuoteWhereInput! = {}): Int
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  oneTimePasswords(where: OneTimePasswordWhereInput! = {}, orderBy: [OneTimePasswordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OneTimePasswordWhereUniqueInput): [OneTimePassword!]
  oneTimePassword(where: OneTimePasswordWhereUniqueInput!): OneTimePassword
  oneTimePasswordsCount(where: OneTimePasswordWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  playerVideo(id: ID!): Video
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type AuthType {
  token: String!
  user: User!
}

type encRequestType {
  encData: String!
}

type BulkMailType {
  message: String!
}

type generateOtpType {
  message: String!
  email: String
}

type generateSignupOtpType {
  message: String!
  email: String
  isVerified: Boolean
}

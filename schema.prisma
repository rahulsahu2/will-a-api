// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                             String            @id @default(cuid())
  name                           String            @default("")
  email                          String            @unique @default("")
  username                       String            @default("")
  azureId                        String            @default("")
  phone                          String            @default("")
  pincode                        String            @default("")
  city                           String            @default("")
  state                          String            @default("")
  country                        String            @default("")
  address                        String            @default("")
  organization                   String            @default("")
  password                       String
  isAdmin                        Boolean           @default(false)
  isVerified                     Boolean           @default(false)
  subscription                   Subscription[]    @relation("Subscription_user")
  certificate                    Certificate[]     @relation("Certificate_user")
  updatedAt                      DateTime?         @updatedAt
  createdAt                      DateTime?         @default(now())
  updatedBy                      User?             @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                    String?           @map("updatedBy")
  createdBy                      User?             @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                    String?           @map("createdBy")
  from_User_updatedBy            User[]            @relation("User_updatedBy")
  from_User_createdBy            User[]            @relation("User_createdBy")
  from_Bulletin_updatedBy        Bulletin[]        @relation("Bulletin_updatedBy")
  from_Bulletin_createdBy        Bulletin[]        @relation("Bulletin_createdBy")
  from_Event_updatedBy           Event[]           @relation("Event_updatedBy")
  from_Event_createdBy           Event[]           @relation("Event_createdBy")
  from_Announcement_updatedBy    Announcement[]    @relation("Announcement_updatedBy")
  from_Announcement_createdBy    Announcement[]    @relation("Announcement_createdBy")
  from_Plan_updatedBy            Plan[]            @relation("Plan_updatedBy")
  from_Plan_createdBy            Plan[]            @relation("Plan_createdBy")
  from_Subscription_updatedBy    Subscription[]    @relation("Subscription_updatedBy")
  from_Subscription_createdBy    Subscription[]    @relation("Subscription_createdBy")
  from_Video_updatedBy           Video[]           @relation("Video_updatedBy")
  from_Video_createdBy           Video[]           @relation("Video_createdBy")
  from_WatchingList_user         WatchingList[]    @relation("WatchingList_user")
  from_WatchingList_updatedBy    WatchingList[]    @relation("WatchingList_updatedBy")
  from_WatchingList_createdBy    WatchingList[]    @relation("WatchingList_createdBy")
  from_Certificate_updatedBy     Certificate[]     @relation("Certificate_updatedBy")
  from_Certificate_createdBy     Certificate[]     @relation("Certificate_createdBy")
  from_Membership_updatedBy      Membership[]      @relation("Membership_updatedBy")
  from_Membership_createdBy      Membership[]      @relation("Membership_createdBy")
  from_CallRequest_updatedBy     CallRequest[]     @relation("CallRequest_updatedBy")
  from_CallRequest_createdBy     CallRequest[]     @relation("CallRequest_createdBy")
  from_WillMeetUp_updatedBy      WillMeetUp[]      @relation("WillMeetUp_updatedBy")
  from_WillMeetUp_createdBy      WillMeetUp[]      @relation("WillMeetUp_createdBy")
  from_Banner_updatedBy          Banner[]          @relation("Banner_updatedBy")
  from_Banner_createdBy          Banner[]          @relation("Banner_createdBy")
  from_Config_updatedBy          Config[]          @relation("Config_updatedBy")
  from_Config_createdBy          Config[]          @relation("Config_createdBy")
  from_Quote_updatedBy           Quote[]           @relation("Quote_updatedBy")
  from_Quote_createdBy           Quote[]           @relation("Quote_createdBy")
  from_Notification_updatedBy    Notification[]    @relation("Notification_updatedBy")
  from_Notification_createdBy    Notification[]    @relation("Notification_createdBy")
  from_OneTimePassword_user      OneTimePassword[] @relation("OneTimePassword_user")
  from_OneTimePassword_updatedBy OneTimePassword[] @relation("OneTimePassword_updatedBy")
  from_OneTimePassword_createdBy OneTimePassword[] @relation("OneTimePassword_createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Bulletin {
  id              String    @id @default(cuid())
  title           String    @default("")
  subTitle        String    @default("")
  url             String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  information     String    @default("")
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  updatedBy       User?     @relation("Bulletin_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Bulletin_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([createdAt])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Event {
  id              String    @id @default(cuid())
  title           String    @default("")
  subTitle        String    @default("")
  startDate       DateTime? @default(now())
  endDate         DateTime? @default(now())
  url             String    @default("")
  information     String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  updatedBy       User?     @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([createdAt])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Announcement {
  id              String    @id @default(cuid())
  title           String    @default("")
  date            DateTime  @default(now())
  information     String    @default("")
  linkType        String?
  link            String    @default("")
  linkTarget      String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  updatedBy       User?     @relation("Announcement_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Announcement_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([createdAt])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Plan {
  id           String         @id @default(cuid())
  name         String         @default("")
  srNo         Int?
  random       String?        @default("False")
  price        Float
  description  String         @default("")
  subscription Subscription[] @relation("Subscription_plan")
  video        Video[]        @relation("Video_plan")
  updatedAt    DateTime?      @updatedAt
  createdAt    DateTime?      @default(now())
  updatedBy    User?          @relation("Plan_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?        @map("updatedBy")
  createdBy    User?          @relation("Plan_createdBy", fields: [createdById], references: [id])
  createdById  String?        @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Subscription {
  id              String    @id @default(cuid())
  plan            Plan?     @relation("Subscription_plan", fields: [planId], references: [id])
  planId          String?   @map("plan")
  user            User?     @relation("Subscription_user", fields: [userId], references: [id])
  userId          String?   @map("user")
  paymentStatus   String    @default("")
  paymentId       String    @default("")
  amount          Float
  transactionDate DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Subscription_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Subscription_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([planId])
  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Video {
  id                      String         @id @default(cuid())
  name                    String         @default("")
  srNo                    Int?
  video_type              String?        @default("youtube")
  isPublic                Boolean        @default(false)
  isFeatured              Boolean        @default(false)
  videoId                 String         @default("")
  url_filename            String?
  url_filesize            Int?
  thumbnail_filesize      Int?
  thumbnail_extension     String?
  thumbnail_width         Int?
  thumbnail_height        Int?
  thumbnail_id            String?
  plan                    Plan?          @relation("Video_plan", fields: [planId], references: [id])
  planId                  String?        @map("plan")
  updatedAt               DateTime?      @updatedAt
  createdAt               DateTime?      @default(now())
  updatedBy               User?          @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById             String?        @map("updatedBy")
  createdBy               User?          @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById             String?        @map("createdBy")
  from_WatchingList_video WatchingList[] @relation("WatchingList_video")

  @@index([planId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model WatchingList {
  id          String    @id @default(cuid())
  video       Video?    @relation("WatchingList_video", fields: [videoId], references: [id])
  videoId     String?   @map("video")
  user        User?     @relation("WatchingList_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  duration    String    @default("")
  watchtime   String    @default("")
  status      String?   @default("InProgress")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("WatchingList_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("WatchingList_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([videoId])
  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Certificate {
  id                   String    @id @default(cuid())
  user                 User?     @relation("Certificate_user", fields: [userId], references: [id])
  userId               String?   @map("user")
  certificate_filename String?
  certificate_filesize Int?
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  updatedBy            User?     @relation("Certificate_updatedBy", fields: [updatedById], references: [id])
  updatedById          String?   @map("updatedBy")
  createdBy            User?     @relation("Certificate_createdBy", fields: [createdById], references: [id])
  createdById          String?   @map("createdBy")

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Membership {
  id          String    @id @default(cuid())
  location    String?   @default("India")
  type        String?   @default("India")
  name        String    @default("")
  phone       String    @default("")
  email       String    @default("")
  designation String    @default("")
  company     String    @default("")
  pincode     String    @default("")
  city        String    @default("")
  state       String    @default("")
  country     String    @default("")
  address     String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Membership_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Membership_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model CallRequest {
  id          String    @id @default(cuid())
  name        String    @default("")
  email       String    @default("")
  phoneNumber String    @default("")
  message     String    @default("")
  time        String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("CallRequest_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("CallRequest_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model WillMeetUp {
  id           String    @id @default(cuid())
  name         String    @default("")
  email        String    @default("")
  phoneNumber  String    @default("")
  organization String    @default("")
  updatedAt    DateTime? @updatedAt
  createdAt    DateTime? @default(now())
  updatedBy    User?     @relation("WillMeetUp_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?   @map("updatedBy")
  createdBy    User?     @relation("WillMeetUp_createdBy", fields: [createdById], references: [id])
  createdById  String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Banner {
  id              String    @id @default(cuid())
  name            String    @default("")
  banner_type     String?   @default("image")
  videoId         String    @default("")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  active          Boolean   @default(false)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  updatedBy       User?     @relation("Banner_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Banner_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([createdAt])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Config {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String    @default("")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  updatedBy   User?     @relation("Config_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Config_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([createdAt])
  @@index([updatedAt])
  @@index([updatedById])
  @@index([createdById])
}

model Quote {
  id          String    @id @default(cuid())
  quote       String    @default("")
  date        DateTime
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("Quote_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("Quote_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model Notification {
  id              String    @id @default(cuid())
  title           String    @default("")
  date            DateTime  @default(now())
  description     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime? @default(now())
  updatedBy       User?     @relation("Notification_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?   @map("updatedBy")
  createdBy       User?     @relation("Notification_createdBy", fields: [createdById], references: [id])
  createdById     String?   @map("createdBy")

  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}

model OneTimePassword {
  id          String    @id @default(cuid())
  otp         String    @unique @default("")
  email       String    @default("")
  isUsed      Boolean   @default(false)
  user        User?     @relation("OneTimePassword_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  updatedBy   User?     @relation("OneTimePassword_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")
  createdBy   User?     @relation("OneTimePassword_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([updatedById])
  @@index([createdById])
}
